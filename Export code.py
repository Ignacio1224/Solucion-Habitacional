#!/usr/bin/env python
# -*- coding: utf-8 -*-

from colorama import init
from termcolor import colored

init()
filesFolder = './Obl2_P3'
filesPath = [
    # Dominio

    # App Config
    filesFolder + "/App.config",
    
    # Contexto Db
    filesFolder + "/Contexto_DB/Contexto.cs",

    # Interfaces
    filesFolder + "/Dominio/Interfaces/IRepoBarrio.cs",
    filesFolder + "/Dominio/Interfaces/IRepoImport.cs",
    filesFolder + "/Dominio/Interfaces/IRepoParametro.cs",
    filesFolder + "/Dominio/Interfaces/IRepoPostulante.cs",
    filesFolder + "/Dominio/Interfaces/IRepoSorteo.cs",
    filesFolder + "/Dominio/Interfaces/IRepoUsuario.cs",
    filesFolder + "/Dominio/Interfaces/IRepoVivienda.cs",

    # Repositorios
    filesFolder + "/Dominio/Repositorios/RepoBarrio.cs",
    filesFolder + "/Dominio/Repositorios/RepoParametro.cs",
    filesFolder + "/Dominio/Repositorios/RepoPasante.cs",
    filesFolder + "/Dominio/Repositorios/RepoSorteo.cs",
    filesFolder + "/Dominio/Repositorios/RepoUsuario.cs",
    filesFolder + "/Dominio/Repositorios/RepoVivienda.cs",

    filesFolder + "/Dominio/Clases/Barrio.cs",
    filesFolder + "/Dominio/Clases/Parametro.cs",
    filesFolder + "/Dominio/Clases/Postulante.cs",
    filesFolder + "/Dominio/Clases/Sorteo.cs",
    filesFolder + "/Dominio/Clases/Usuario.cs",
    filesFolder + "/Dominio/Clases/Utilidades.cs",
    filesFolder + "/Dominio/Clases/Vivienda.cs",
    filesFolder + "/Dominio/Clases/ViviendaNueva.cs",
    filesFolder + "/Dominio/Clases/ViviendaUsada.cs",


    # MVC

    filesFolder + "/Obl2_P3",
    filesFolder + "/Obl2_P3/Controllers/BarrioController.cs",
    filesFolder + "/Obl2_P3/Controllers/HomeController.cs",
    filesFolder + "/Obl2_P3/Controllers/LoginController.cs",
    filesFolder + "/Obl2_P3/Controllers/ParametroController.cs",
    filesFolder + "/Obl2_P3/Controllers/PostulanteController.cs",
    filesFolder + "/Obl2_P3/Controllers/SorteoController.cs",
    filesFolder + "/Obl2_P3/Controllers/ViviendaController.cs",

    filesFolder + "/Obl2_P3/Models/VMPostulante.cs",
    filesFolder + "/Obl2_P3/Models/VMSorteo.cs",
    filesFolder + "/Obl2_P3/Models/VMUsuario.cs",
    filesFolder + "/Obl2_P3/Models/VMVivienda.cs",
    filesFolder + "/Obl2_P3/Utiliteies/Check.cs",
    filesFolder + "/Obl2_P3/Views/Barrio/Details.cshtml",
    filesFolder + "/Obl2_P3/Views/Barrio/Index.cshtml",
    filesFolder + "/Obl2_P3/Views/Home/About.cshtml",
    filesFolder + "/Obl2_P3/Views/Home/Contact.cshtml",
    filesFolder + "/Obl2_P3/Views/Home/Index.cshtml",
    filesFolder + "/Obl2_P3/Views/Login/Index.cshml",
    filesFolder + "/Obl2_P3/Views/Parametro/Details.cshtml",
    filesFolder + "/Obl2_P3/Views/Parametro/Index.cshtml",
    filesFolder + "/Obl2_P3/Views/Postulante/CrearPostulante.cshtml",
    filesFolder + "/Obl2_P3/Views/Shared/_Layout.cshtml",
    filesFolder + "/Obl2_P3/Views/Shared/Error.cshtml",
    filesFolder + "/Obl2_P3/Views/Sorteo/CreatePreSorteo.cshtml",
    filesFolder + "/Obl2_P3/Views/Sorteo/CreateSorteo.cshtml",
    filesFolder + "/Obl2_P3/Views/Sorteo/Details.cshtml",
    filesFolder + "/Obl2_P3/Views/Sorteo/Index.cshtml",
    filesFolder + "/Obl2_P3/Views/Vivienda/Details.cshtml",
    filesFolder + "/Obl2_P3/Views/Vivienda/Edit.cshtml",
    filesFolder + "/Obl2_P3/Views/Vivienda/GetViviendasByFiltros.cshtml",
    filesFolder + "/Obl2_P3/Views/Index.cshtml",
    filesFolder + "/Obl2_P3/Views/_ViewStart.cshtml",
    filesFolder + "/Obl2_P3/Views/Web.config",

    # WebApi
    filesFolder + "/Obl2_P3/WebAPI/Web.config",
    filesFolder + "/Obl2_P3/WebAPI/App_Start/WebApiConfig.cs",
    filesFolder + "/Obl2_P3/WebAPI/Controllers/PostulanteController.cs",
    filesFolder + "/Obl2_P3/WebAPI/Controllers/ViviendaController.cs",
    filesFolder + "/Obl2_P3/WebAPI/Models/VMPostulanteAPI.cs",
    filesFolder + "/Obl2_P3/WebAPI/Models/VMViviendaAPI.cs",
]

exported = open('exported.txt', "w")

numFiles = 0
errors = 0
for f in filesPath:
    try:
        fp = open(f, "r")
        print(colored(f, "green"))

        numFiles = numFiles + 1

        if numFiles != 1:
            exported.write("\n\n\n")
        else:
            from datetime import date
            exported.write(
                "Autogenerated file - {}\n\n\n".format(date.today().strftime("%B %d, %Y")))

        exported.write(r"// {}".format(f.split('/', )
                                       [len(f.split('/', ))-1].split('.', )[0]) + "\n")

        for cnt, line in enumerate(fp):
            if cnt != 0:
                exported.write(r"{}".format(line))
            else:
                # Slice 3 first character caus are not printables
                exported.write(r"{}".format(line)[3:])

        fp.close()

    except (OSError, IOError) as e:
        errors = errors + 1
        print(colored("Error! - {}".format(e), "white", "on_red"))

exported.close()
print("\n\nFinished!")
print(colored("\tFiles written: {}".format(numFiles), "green"))
print(colored("\tErrors: {}".format(errors), "red"))
